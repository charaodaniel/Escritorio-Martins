import puppeteer from 'puppeteer';
import fs from 'fs/promises';
import path from 'path';
import { loadContent, ContentData } from './content-loader';

const INSTAGRAM_PROFILE_URL = 'https://www.instagram.com/vieiraemartinsadv/';
const MAX_POSTS = 12; // Coleta as 12 publica√ß√µes mais recentes

// Fun√ß√£o para gerar o c√≥digo de incorpora√ß√£o (blockquote) a partir de uma URL de post
const getEmbedCode = (postUrl: string): string => {
  return `<blockquote class="instagram-media" data-instgrm-permalink="${postUrl}?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="14" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"><a href="${postUrl}?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"></div></blockquote>`;
};

export async function runScraper() {
  console.log('üöÄ Iniciando scraper do Instagram...');
  let browser;

  try {
    browser = await puppeteer.launch({
        headless: true, // "new" √© a op√ß√£o recomendada
        args: ['--no-sandbox', '--disable-setuid-sandbox'], // Argumentos importantes para rodar em ambientes de servidor/docker
    });
    
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
    
    console.log(`Navegando para ${INSTAGRAM_PROFILE_URL}...`);
    await page.goto(INSTAGRAM_PROFILE_URL, { waitUntil: 'networkidle2' });

    console.log('P√°gina carregada. Coletando links das publica√ß√µes...');

    // O seletor para os links das publica√ß√µes pode mudar. Este √© um exemplo.
    // O seletor `a[href^="/p/"]` pega todos os links que come√ßam com /p/, que s√£o os posts.
    const postLinks = await page.evaluate((max) => {
        const links = Array.from(document.querySelectorAll('a[href^="/p/"]'));
        const uniqueLinks = new Set(links.map(a => (a as HTMLAnchorElement).href));
        return Array.from(uniqueLinks).slice(0, max);
    }, MAX_POSTS);

    if (postLinks.length === 0) {
      console.warn('‚ö†Ô∏è Nenhum link de publica√ß√£o encontrado. O Instagram pode ter mudado sua estrutura de p√°gina.');
      return;
    }

    console.log(`‚úÖ ${postLinks.length} links de publica√ß√µes encontrados.`);

    const newPosts = postLinks.map(link => ({
      embedCode: getEmbedCode(link),
    }));

    // Carrega o arquivo de conte√∫do atual
    const contentFilePath = path.join(process.cwd(), 'src', 'data', 'content.json');
    const currentContent = loadContent();

    // Atualiza apenas a parte das publica√ß√µes do Instagram
    const updatedContent: ContentData = {
      ...currentContent,
      testimonials: {
        ...currentContent.testimonials,
        instagram: {
          ...currentContent.testimonials.instagram,
          enabled: true,
          posts: newPosts,
        },
      },
    };

    // Salva o arquivo content.json atualizado
    await fs.writeFile(contentFilePath, JSON.stringify(updatedContent, null, 2), 'utf-8');
    
    console.log('‚úÖ Arquivo content.json atualizado com sucesso com as novas publica√ß√µes.');

  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o do scraper:', error);
    throw new Error('Falha ao extrair publica√ß√µes do Instagram.');
  } finally {
    if (browser) {
      await browser.close();
      console.log('üîí Navegador fechado.');
    }
  }
}
